# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import services_pb2 as services__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/User/GetUser',
                request_serializer=services__pb2.GetUserRequest.SerializeToString,
                response_deserializer=services__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.GetUsers = channel.unary_unary(
                '/User/GetUsers',
                request_serializer=services__pb2.GetUsersRequest.SerializeToString,
                response_deserializer=services__pb2.GetUsersResponse.FromString,
                _registered_method=True)
        self.CheckLogin = channel.unary_unary(
                '/User/CheckLogin',
                request_serializer=services__pb2.CheckLoginRequest.SerializeToString,
                response_deserializer=services__pb2.CheckLoginResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/User/Register',
                request_serializer=services__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=services__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.ChangeRole = channel.unary_unary(
                '/User/ChangeRole',
                request_serializer=services__pb2.ChangeRoleRequest.SerializeToString,
                response_deserializer=services__pb2.ChangeRoleResponse.FromString,
                _registered_method=True)


class UserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=services__pb2.GetUserRequest.FromString,
                    response_serializer=services__pb2.GetUserResponse.SerializeToString,
            ),
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=services__pb2.GetUsersRequest.FromString,
                    response_serializer=services__pb2.GetUsersResponse.SerializeToString,
            ),
            'CheckLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckLogin,
                    request_deserializer=services__pb2.CheckLoginRequest.FromString,
                    response_serializer=services__pb2.CheckLoginResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=services__pb2.RegistrationRequest.FromString,
                    response_serializer=services__pb2.RegistrationResponse.SerializeToString,
            ),
            'ChangeRole': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeRole,
                    request_deserializer=services__pb2.ChangeRoleRequest.FromString,
                    response_serializer=services__pb2.ChangeRoleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'User', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('User', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class User(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/User/GetUser',
            services__pb2.GetUserRequest.SerializeToString,
            services__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/User/GetUsers',
            services__pb2.GetUsersRequest.SerializeToString,
            services__pb2.GetUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/User/CheckLogin',
            services__pb2.CheckLoginRequest.SerializeToString,
            services__pb2.CheckLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/User/Register',
            services__pb2.RegistrationRequest.SerializeToString,
            services__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/User/ChangeRole',
            services__pb2.ChangeRoleRequest.SerializeToString,
            services__pb2.ChangeRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TasksStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserTasks = channel.unary_unary(
                '/Tasks/GetUserTasks',
                request_serializer=services__pb2.GetTasksRequest.SerializeToString,
                response_deserializer=services__pb2.GetTasksResponse.FromString,
                _registered_method=True)
        self.TaskDone = channel.unary_unary(
                '/Tasks/TaskDone',
                request_serializer=services__pb2.TaskDoneRequest.SerializeToString,
                response_deserializer=services__pb2.TaskDoneResponse.FromString,
                _registered_method=True)
        self.MakeTask = channel.unary_unary(
                '/Tasks/MakeTask',
                request_serializer=services__pb2.MakeTaskRequest.SerializeToString,
                response_deserializer=services__pb2.MakeTaskResponse.FromString,
                _registered_method=True)
        self.GetBlockTasks = channel.unary_unary(
                '/Tasks/GetBlockTasks',
                request_serializer=services__pb2.GetBlockTasksRequest.SerializeToString,
                response_deserializer=services__pb2.GetBlockTasksResponse.FromString,
                _registered_method=True)
        self.DeleteTask = channel.unary_unary(
                '/Tasks/DeleteTask',
                request_serializer=services__pb2.DeleteTaskRequest.SerializeToString,
                response_deserializer=services__pb2.DeleteTaskResponse.FromString,
                _registered_method=True)


class TasksServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskDone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TasksServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserTasks,
                    request_deserializer=services__pb2.GetTasksRequest.FromString,
                    response_serializer=services__pb2.GetTasksResponse.SerializeToString,
            ),
            'TaskDone': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskDone,
                    request_deserializer=services__pb2.TaskDoneRequest.FromString,
                    response_serializer=services__pb2.TaskDoneResponse.SerializeToString,
            ),
            'MakeTask': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeTask,
                    request_deserializer=services__pb2.MakeTaskRequest.FromString,
                    response_serializer=services__pb2.MakeTaskResponse.SerializeToString,
            ),
            'GetBlockTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockTasks,
                    request_deserializer=services__pb2.GetBlockTasksRequest.FromString,
                    response_serializer=services__pb2.GetBlockTasksResponse.SerializeToString,
            ),
            'DeleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTask,
                    request_deserializer=services__pb2.DeleteTaskRequest.FromString,
                    response_serializer=services__pb2.DeleteTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Tasks', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Tasks', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Tasks(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Tasks/GetUserTasks',
            services__pb2.GetTasksRequest.SerializeToString,
            services__pb2.GetTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Tasks/TaskDone',
            services__pb2.TaskDoneRequest.SerializeToString,
            services__pb2.TaskDoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MakeTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Tasks/MakeTask',
            services__pb2.MakeTaskRequest.SerializeToString,
            services__pb2.MakeTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Tasks/GetBlockTasks',
            services__pb2.GetBlockTasksRequest.SerializeToString,
            services__pb2.GetBlockTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Tasks/DeleteTask',
            services__pb2.DeleteTaskRequest.SerializeToString,
            services__pb2.DeleteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HistoryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddHistory = channel.unary_unary(
                '/History/AddHistory',
                request_serializer=services__pb2.AddHistoryRequest.SerializeToString,
                response_deserializer=services__pb2.AddHistoryResponse.FromString,
                _registered_method=True)
        self.GetBlockHistory = channel.unary_unary(
                '/History/GetBlockHistory',
                request_serializer=services__pb2.GetBlockHistoryRequest.SerializeToString,
                response_deserializer=services__pb2.GetBlockHistoryResponse.FromString,
                _registered_method=True)


class HistoryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HistoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.AddHistory,
                    request_deserializer=services__pb2.AddHistoryRequest.FromString,
                    response_serializer=services__pb2.AddHistoryResponse.SerializeToString,
            ),
            'GetBlockHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockHistory,
                    request_deserializer=services__pb2.GetBlockHistoryRequest.FromString,
                    response_serializer=services__pb2.GetBlockHistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'History', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('History', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class History(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/History/AddHistory',
            services__pb2.AddHistoryRequest.SerializeToString,
            services__pb2.AddHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/History/GetBlockHistory',
            services__pb2.GetBlockHistoryRequest.SerializeToString,
            services__pb2.GetBlockHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DormStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDormsBlocks = channel.unary_unary(
                '/Dorm/GetDormsBlocks',
                request_serializer=services__pb2.GetDormsBlocksRequest.SerializeToString,
                response_deserializer=services__pb2.GetDormsBlocksResponse.FromString,
                _registered_method=True)
        self.AddUser = channel.unary_unary(
                '/Dorm/AddUser',
                request_serializer=services__pb2.AddUserRequest.SerializeToString,
                response_deserializer=services__pb2.AddUserResponse.FromString,
                _registered_method=True)
        self.KickUser = channel.unary_unary(
                '/Dorm/KickUser',
                request_serializer=services__pb2.KickUserRequest.SerializeToString,
                response_deserializer=services__pb2.KickUserResponse.FromString,
                _registered_method=True)


class DormServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDormsBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KickUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DormServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDormsBlocks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDormsBlocks,
                    request_deserializer=services__pb2.GetDormsBlocksRequest.FromString,
                    response_serializer=services__pb2.GetDormsBlocksResponse.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=services__pb2.AddUserRequest.FromString,
                    response_serializer=services__pb2.AddUserResponse.SerializeToString,
            ),
            'KickUser': grpc.unary_unary_rpc_method_handler(
                    servicer.KickUser,
                    request_deserializer=services__pb2.KickUserRequest.FromString,
                    response_serializer=services__pb2.KickUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Dorm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Dorm', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Dorm(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDormsBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dorm/GetDormsBlocks',
            services__pb2.GetDormsBlocksRequest.SerializeToString,
            services__pb2.GetDormsBlocksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dorm/AddUser',
            services__pb2.AddUserRequest.SerializeToString,
            services__pb2.AddUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def KickUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dorm/KickUser',
            services__pb2.KickUserRequest.SerializeToString,
            services__pb2.KickUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RequestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRequest = channel.unary_unary(
                '/Request/AddRequest',
                request_serializer=services__pb2.AddRequestRequest.SerializeToString,
                response_deserializer=services__pb2.AddRequestResponse.FromString,
                _registered_method=True)
        self.CancelRequest = channel.unary_unary(
                '/Request/CancelRequest',
                request_serializer=services__pb2.CancelRequestRequest.SerializeToString,
                response_deserializer=services__pb2.CancelRequestResponse.FromString,
                _registered_method=True)
        self.GetRequest = channel.unary_unary(
                '/Request/GetRequest',
                request_serializer=services__pb2.GetRequestRequest.SerializeToString,
                response_deserializer=services__pb2.GetRequestResponse.FromString,
                _registered_method=True)
        self.GetRequests = channel.unary_unary(
                '/Request/GetRequests',
                request_serializer=services__pb2.GetRequestsRequest.SerializeToString,
                response_deserializer=services__pb2.GetRequestsResponse.FromString,
                _registered_method=True)
        self.SetRequestStatus = channel.unary_unary(
                '/Request/SetRequestStatus',
                request_serializer=services__pb2.SetRequestStatusRequest.SerializeToString,
                response_deserializer=services__pb2.SetRequestStatusResponse.FromString,
                _registered_method=True)
        self.DeleteRequests = channel.unary_unary(
                '/Request/DeleteRequests',
                request_serializer=services__pb2.DeleteRequestsRequest.SerializeToString,
                response_deserializer=services__pb2.DeleteRequestsResponse.FromString,
                _registered_method=True)


class RequestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRequests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRequestStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRequests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RequestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRequest,
                    request_deserializer=services__pb2.AddRequestRequest.FromString,
                    response_serializer=services__pb2.AddRequestResponse.SerializeToString,
            ),
            'CancelRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelRequest,
                    request_deserializer=services__pb2.CancelRequestRequest.FromString,
                    response_serializer=services__pb2.CancelRequestResponse.SerializeToString,
            ),
            'GetRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRequest,
                    request_deserializer=services__pb2.GetRequestRequest.FromString,
                    response_serializer=services__pb2.GetRequestResponse.SerializeToString,
            ),
            'GetRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRequests,
                    request_deserializer=services__pb2.GetRequestsRequest.FromString,
                    response_serializer=services__pb2.GetRequestsResponse.SerializeToString,
            ),
            'SetRequestStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRequestStatus,
                    request_deserializer=services__pb2.SetRequestStatusRequest.FromString,
                    response_serializer=services__pb2.SetRequestStatusResponse.SerializeToString,
            ),
            'DeleteRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRequests,
                    request_deserializer=services__pb2.DeleteRequestsRequest.FromString,
                    response_serializer=services__pb2.DeleteRequestsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Request', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Request', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Request(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/AddRequest',
            services__pb2.AddRequestRequest.SerializeToString,
            services__pb2.AddRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/CancelRequest',
            services__pb2.CancelRequestRequest.SerializeToString,
            services__pb2.CancelRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/GetRequest',
            services__pb2.GetRequestRequest.SerializeToString,
            services__pb2.GetRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/GetRequests',
            services__pb2.GetRequestsRequest.SerializeToString,
            services__pb2.GetRequestsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetRequestStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/SetRequestStatus',
            services__pb2.SetRequestStatusRequest.SerializeToString,
            services__pb2.SetRequestStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/DeleteRequests',
            services__pb2.DeleteRequestsRequest.SerializeToString,
            services__pb2.DeleteRequestsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
